<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <!--  xmlns="http://xmlns.jcp.org/xml/ns/javaee"
    네임스페이스의 uri를 지정한다.- 이는 jakarta EE에 해당하는 스키마의 유효성을 검사한다.
       즉, 만약 아래 XML 내용(이름,속성, 데이터 유형,값의 범위 등)이 jakarta EE의 규칙에 해당하지 않는 경우 오류가 발생 한다.

       논리적 구조들을 고유의 URL 식별자로 선언 - xml파일은 대부분의 파일에 적용하는 경우가 많은데,
        java,spring 등 다양한 파일의 형식이 있다. 그래서 같은 이름의 다른 기능을 하는 테그같은게 있을 수 있음 그래서 써준다.-->

    <!-- xsi:schemaLocation - 첫번째는 사용할 네임스페이스 , 두번째는 참조할 스키마 파일 이름 -->

    <!--root-context관련 ,빈(bean)들을 관리-->
    <context-param>  <!--여기에 설정된 파일은 모든 서블릿과 필터에서 사용되는 설정--><!--시큐리티 설정 파일 등록-->
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath:spring/root-context.xml
            classpath:spring/security-context.xml
        </param-value>


    </context-param>
    <listener>
        <listener-class>
            org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>


    <!--servlet 설정 관리 - servlet을 통해 어노테이션을 사용해서 beans들을 관리-(설정)-->
    <servlet>
        <servlet-name>appServlet</servlet-name> <!--이곳엔 설정할 서블릿 이름을-->
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class><!--DispatcherServlet 클래스 설정-->
        <init-param> <!--여기에 설정된 모든 서블릿에서만 사용되는 설정-->
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring/servlet-context.xml</param-value> <!--파일 경로에 있는 servlet-context.xml이라는 파일에 설정하겠다.-->
        </init-param>
        <load-on-startup>1</load-on-startup> <!--로드온 스타트업- 1 은 서버와 함께 동작하겠다.-->
    </servlet>
    <servlet-mapping> <!--어떤 서블릿을 매핑할꺼야?-->
        <servlet-name>appServlet</servlet-name> <!--매핑할 서블릿 이름 - 위에 우리가 설정해 놓은 서블릿 appServlet-->
        <url-pattern>/</url-pattern> <!--웹 주소창을 보면 / 뒤에 오는 모든 url을 위에 appServlet(위에서 우리가 설정한 서블릿이름)으로 설정 하겠다.-->
        <!--이 appServlet은 위에서 보이듯 DispatcherServlet 클래스로 설정되 어있음 .즉,모든 url은 DispatcherServlet이 다 가져간다. -->
    </servlet-mapping>

    <!--DispatcherServlet은 웹 요청을 처리하고 관리하는 중요한 컴포넌트
    -중요!!  Spring MVC (Model-View-Controller) 아키텍처의 핵심 부분이며,
            웹 요청을 적절한 핸들러(컨트롤러)로 라우팅하고, 처리 결과를 뷰에 전달하여 클라이언트에게 응답을 생성합니다.

    -->






    <!--스프링에서 한글 깨짐 방지 UTF-8 인코딩-->
    <filter>
        <filter-name>EncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>Encoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>EncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <!--시큐리티 필터,설정 파일 등록-->

    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>





</web-app>